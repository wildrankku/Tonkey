import os
import asyncio
import datetime
import re
from datetime import UTC, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler,
)
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv
from telegram.error import BadRequest

# ------------------- Environment Setup -------------------
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")
LOGGER_GROUP_ID = int(os.getenv("LOGGER_GROUP_ID", 0))
OWNER_ID = int(os.getenv("OWNER_ID", 0))

# ------------------- MongoDB Collections -------------------
client = AsyncIOMotorClient(MONGO_URI)
db = client["SakuraStats"]

daily_groups = db["daily_groups"]
overall_groups = db["overall_groups"]
daily_users = db["daily_users"]
overall_users = db["overall_users"]
group_milestones = db["group_milestones"]
sudo_list = db["sudo_list"]
tracked_groups = db["tracked_groups"]

# ------------------- Utility Functions -------------------
async def escape_markdown(text: str) -> str:
    return re.sub(r'([_*\[\]()~`>#+=|{}.!-])', r'\\\1', text[:25]) if text else "Anonymous"

async def log_event(context: CallbackContext, text: str):
    if LOGGER_GROUP_ID:
        await context.bot.send_message(LOGGER_GROUP_ID, text, parse_mode="MarkdownV2")

async def is_sudo(user_id: int) -> bool:
    return user_id == OWNER_ID or await sudo_list.find_one({"user_id": user_id})

# ------------------- /start Command -------------------
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("➕ Add to Group", url=f"https://t.me/{context.bot.username}?startgroup=true")],
        [InlineKeyboardButton("⚙ Settings", callback_data="settings"), 
         InlineKeyboardButton("🔄 Updates", url="https://t.me/samurais_network")],
        [InlineKeyboardButton("👑 Owner", url="https://t.me/Itz_Marv1n"), 
         InlineKeyboardButton("💬 Support", url="https://t.me/anime_group_chat_en")]
    ]
    
    await update.message.reply_photo(
        photo="https://telegra.ph/file/28e287f80fd6a7ba67d62.jpg",
        caption="🌸 *Welcome to Sakura Stats!* 🌸\nTrack group activity and climb leaderboards!",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="MarkdownV2"
    )

# ------------------- Message Tracking -------------------
async def track_message(update: Update, context: CallbackContext):
    if not update.message or update.message.chat.type not in ["group", "supergroup"]:
        return

    user = update.message.from_user
    chat = update.message.chat
    now = datetime.datetime.now(UTC)
    today = now.replace(hour=0, minute=0, second=0, microsecond=0)

    # Update Group Stats
    await asyncio.gather(
        daily_groups.update_one(
            {"group_id": chat.id, "date": today},
            {"$inc": {"count": 1}, "$set": {"group_name": await escape_markdown(chat.title)}},
            upsert=True
        ),
        overall_groups.update_one(
            {"group_id": chat.id},
            {"$inc": {"count": 1}, "$set": {"group_name": await escape_markdown(chat.title)}},
            upsert=True
        )
    )

    # Update User Stats
    await asyncio.gather(
        daily_users.update_one(
            {"user_id": user.id, "group_id": chat.id, "date": today},
            {"$inc": {"count": 1}, "$set": {"first_name": await escape_markdown(user.first_name)}},
            upsert=True
        ),
        overall_users.update_one(
            {"user_id": user.id, "group_id": chat.id},
            {"$inc": {"count": 1}, "$set": {"first_name": await escape_markdown(user.first_name)}},
            upsert=True
        )
    )

    # Check Group Milestones (500, 1000, 1500...)
    group_stat = await daily_groups.find_one({"group_id": chat.id, "date": today})
    if group_stat:
        count = group_stat["count"]
        milestone = (count // 500) * 500
        if count % 500 == 0 and count > 0:
            if not await group_milestones.find_one({"group_id": chat.id, "milestone": milestone}):
                await context.bot.send_message(
                    chat_id=chat.id,
                    text=f"🌸 **CONGRATULATIONS!** 🌸\n\nToday's messages reached **{milestone}**! 🎉\nKeep blooming! 🌸✨",
                    parse_mode="MarkdownV2"
                )
                await group_milestones.insert_one({
                    "group_id": chat.id,
                    "milestone": milestone,
                    "date": today
                })

# ------------------- /gstat Command -------------------
async def gstat(update: Update, context: CallbackContext):
    try:
        chat = update.effective_chat
        msg = await update.message.reply_photo(
            photo="https://telegra.ph/file/382aff205e8cd367b824c.jpg",
            caption="🌸 Loading Group Stats..."
        )
        await show_gstat(context, chat.id, msg.message_id, False)
    except Exception as e:
        print(f"/gstat Error: {e}")

async def show_gstat(context: CallbackContext, chat_id: int, msg_id: int, is_today: bool):
    collection = daily_users if is_today else overall_users
    today = datetime.datetime.now(UTC).replace(hour=0, minute=0, second=0)
    
    pipeline = [
        {"$match": {"group_id": chat_id, "date": today} if is_today else {"group_id": chat_id}},
        {"$group": {"_id": "$user_id", "count": {"$sum": "$count"}, "name": {"$first": "$first_name"}}},
        {"$sort": {"count": -1}},
        {"$limit": 10}
    ]
    
    users = await collection.aggregate(pipeline).to_list(10)
    text = "📅 *Today's Top Chatters* 📅\n\n" if is_today else "🏆 *All-Time Group Leaders* 🏆\n\n"
    
    for idx, user in enumerate(users, 1):
        text += f"{idx}. {user['name']} - {user['count']}\n"
    
    await context.bot.edit_message_caption(
        chat_id=chat_id,
        message_id=msg_id,
        caption=text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("📅 Today", callback_data="gstat_today"),
             InlineKeyboardButton("🏆 Overall", callback_data="gstat_overall")],
            [InlineKeyboardButton("❌ Close", callback_data="close")]
        ]),
        parse_mode="MarkdownV2"
    )

# ------------------- /topgroups Command -------------------
async def topgroups(update: Update, context: CallbackContext):
    msg = await update.message.reply_photo(
        photo="https://telegra.ph/file/382aff205e8cd367b824c.jpg",
        caption="🌸 Loading Top Groups..."
    )
    await show_top_groups(context, msg.chat_id, msg.message_id, False)

async def show_top_groups(context: CallbackContext, chat_id: int, msg_id: int, is_today: bool):
    collection = daily_groups if is_today else overall_groups
    today = datetime.datetime.now(UTC).replace(hour=0, minute=0, second=0)
    
    pipeline = [
        {"$match": {"date": today} if is_today else {}},
        {"$group": {"_id": "$group_id", "count": {"$sum": "$count"}, "name": {"$first": "$group_name"}}},
        {"$sort": {"count": -1}},
        {"$limit": 10}
    ]
    
    groups = await collection.aggregate(pipeline).to_list(10)
    text = "🔥 *Today's Active Groups* 🔥\n\n" if is_today else "🏆 *All-Time Top Groups* 🏆\n\n"
    
    for idx, group in enumerate(groups, 1):
        text += f"{idx}. {group['name']} - {group['count']}\n"
    
    await context.bot.edit_message_caption(
        chat_id=chat_id,
        message_id=msg_id,
        caption=text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("📅 Today", callback_data="groups_today"),
             InlineKeyboardButton("🏆 Overall", callback_data="groups_overall")],
            [InlineKeyboardButton("❌ Close", callback_data="close")]
        ]),
        parse_mode="MarkdownV2"
    )

# ------------------- /topusers Command -------------------
async def topusers(update: Update, context: CallbackContext):
    msg = await update.message.reply_photo(
        photo="https://telegra.ph/file/382aff205e8cd367b824c.jpg",
        caption="🌸 Loading Global Leaders..."
    )
    await show_top_users(context, msg.chat_id, msg.message_id, False)

async def show_top_users(context: CallbackContext, chat_id: int, msg_id: int, is_today: bool):
    collection = daily_users if is_today else overall_users
    today = datetime.datetime.now(UTC).replace(hour=0, minute=0, second=0)
    
    pipeline = [
        {"$match": {"date": today} if is_today else {}},
        {"$group": {"_id": "$user_id", "count": {"$sum": "$count"}, "name": {"$first": "$first_name"}}},
        {"$sort": {"count": -1}},
        {"$limit": 10}
    ]
    
    users = await collection.aggregate(pipeline).to_list(10)
    text = "🚀 *Today's Global Champions* 🚀\n\n" if is_today else "🌍 *All-Time Legends* 🌍\n\n"
    
    for idx, user in enumerate(users, 1):
        text += f"{idx}. {user['name']} - {user['count']}\n"
    
    await context.bot.edit_message_caption(
        chat_id=chat_id,
        message_id=msg_id,
        caption=text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("📅 Today", callback_data="users_today"),
             InlineKeyboardButton("🏆 Overall", callback_data="users_overall")],
            [InlineKeyboardButton("❌ Close", callback_data="close")]
        ]),
        parse_mode="MarkdownV2"
    )

# ------------------- /profile Command -------------------
async def profile(update: Update, context: CallbackContext):
    user = update.effective_user
    chat = update.effective_chat
    
    today_stat = await daily_users.find_one(
        {"user_id": user.id, "group_id": chat.id,
         "date": datetime.datetime.now(UTC).replace(hour=0, minute=0, second=0)}
    ) or {"count": 0}
    
    overall_stat = await overall_users.find_one(
        {"user_id": user.id, "group_id": chat.id}
    ) or {"count": 0}
    
    await update.message.reply_photo(
        photo=user.photo.big_file_id if user.photo else "https://telegra.ph/file/28e287f80fd6a7ba67d62.jpg",
        caption=(
            f"🌸 *{await escape_markdown(user.first_name)}'s Profile* 🌸\n\n"
            f"📅 Today's Messages: {today_stat['count']}\n"
            f"🏆 All-Time Messages: {overall_stat['count']}"
        ),
        parse_mode="MarkdownV2"
    )

# ------------------- /stats Command -------------------
async def stats(update: Update, context: CallbackContext):
    total_groups = await tracked_groups.count_documents({})
    total_users = await overall_users.distinct("user_id")
    
    await update.message.reply_photo(
        photo="https://telegra.ph/file/382aff205e8cd367b824c.jpg",
        caption=(
            f"📊 *Bot Statistics*\n\n"
            f"🌸 Groups: {total_groups}\n"
            f"👥 Users: {len(total_users)}"
        ),
        parse_mode="MarkdownV2"
    )

# ------------------- Broadcast System -------------------
async def broadcast(update: Update, context: CallbackContext):
    if not await is_sudo(update.effective_user.id):
        await update.message.reply_text("❌ Sudo access required!")
        return
    
    args = context.args
    flags = {
        "pin": "-pin" in args,
        "user": "-user" in args
    }
    message = " ".join([arg for arg in args if not arg.startswith("-")])
    
    success = {"groups": 0, "users": 0}
    
    if not flags["user"]:
        groups = await tracked_groups.distinct("group_id")
        for group_id in groups:
            try:
                msg = await context.bot.send_message(group_id, message)
                if flags["pin"]:
                    await msg.pin()
                success["groups"] += 1
            except:
                continue
    
    if flags["user"]:
        users = await overall_users.distinct("user_id")
        for user_id in users:
            try:
                await context.bot.send_message(user_id, message)
                success["users"] += 1
            except:
                continue
    
    await update.message.reply_text(
        f"📢 Broadcast Results:\n"
        f"• Groups: {success['groups']}\n"
        f"• Users: {success['users']}"
    )

# ------------------- Button Handler -------------------
async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    chat_id = query.message.chat_id
    message_id = query.message.message_id
    
    handler_map = {
        "close": lambda: query.message.delete(),
        "gstat_today": lambda: show_gstat(context, chat_id, message_id, True),
        "gstat_overall": lambda: show_gstat(context, chat_id, message_id, False),
        "groups_today": lambda: show_top_groups(context, chat_id, message_id, True),
        "groups_overall": lambda: show_top_groups(context, chat_id, message_id, False),
        "users_today": lambda: show_top_users(context, chat_id, message_id, True),
        "users_overall": lambda: show_top_users(context, chat_id, message_id, False)
    }
    
    if data in handler_map:
        await handler_map[data]()

# ------------------- Daily Reset -------------------
async def daily_reset(context: CallbackContext):
    yesterday = datetime.datetime.now(UTC) - timedelta(days=1)
    await daily_groups.delete_many({"date": {"$lt": yesterday}})
    await daily_users.delete_many({"date": {"$lt": yesterday}})
    await group_milestones.delete_many({"date": {"$lt": yesterday}})
    
    groups = await tracked_groups.distinct("group_id")
    for group_id in groups:
        try:
            await context.bot.send_message(
                group_id,
                "🔄 Daily stats reset! New rankings started! 🌸"
            )
        except:
            continue

# ------------------- Main Function -------------------
def main():
    application = Application.builder().token(TOKEN).build()
    
    # Handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("gstat", gstat))
    application.add_handler(CommandHandler("topgroups", topgroups))
    application.add_handler(CommandHandler("topusers", topusers))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("broadcast", broadcast))
    
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, track_message))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # Jobs
    application.job_queue.run_daily(daily_reset, time=datetime.time(0, 0, tzinfo=datetime.timezone.utc))
    
    application.run_polling()

if __name__ == "__main__":
    main()
